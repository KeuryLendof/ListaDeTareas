{"version":3,"sources":["componentes/Formulario.js","componentes/Tarea.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","props","useState","texto","tomarTexto","validacion","setValidacion","className","onSubmit","event","preventDefault","trim","nuevaTarea","swal","value","onChange","target","Tarea","modoEdit","setModoEdit","tarea","editText","setEditText","editar","id","onClick","title","text","icon","buttons","dangerMode","then","willDelete","borrar","App","listaTareas","setListaTareas","KEY","listaFiltrada","filter","e","index","actTarea","listaActualizada","map","useEffect","storeTareas","JSON","parse","localStorage","getItem","setItem","stringify","tarealista","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b3b361a.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport swal from 'sweetalert';\r\nimport '../App.css';\r\n\r\nconst Formulario = (props) => {\r\n    const[texto, tomarTexto] = useState(\"\");\r\n    const[validacion, setValidacion] = useState(true);\r\n\r\n    const manejarFormulario = (event) =>{\r\n        tomarTexto(event.target.value);\r\n    }\r\n\r\n    const submit = (event) => {\r\n        event.preventDefault();//Esto hace que la pagina no se recargue\r\n        if(texto.trim() !== \"\"){\r\n            props.nuevaTarea(texto);\r\n            tomarTexto(\"\");\r\n            setValidacion(true);\r\n            swal(\"Good job!\", \"Tarea agregada correctamente!\", \"success\");\r\n        }else{\r\n            setValidacion(false)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <form className=\"form\" onSubmit={submit}><br></br>\r\n                <span>Añadir tarea</span><br></br><br></br>\r\n                <input value = {texto} onChange={manejarFormulario} />\r\n                <button>Añadir</button> <br></br>\r\n            </form>\r\n            {/* VERIFICA NO HEMOS PUESTO UNA TAREA Y SI ES ASI NOS TIRA UN ERROR*/\r\n                !validacion &&\r\n                <div className=\"validacion\">\r\n                    Añada una tarea por favor!\r\n                </div>\r\n                \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Formulario;","import React, {useState} from \"react\";\r\nimport swal from 'sweetalert';\r\nimport '../App.css';\r\n\r\n/* QUI ESTAMOS IMPORTANDO LOS ICONOS DE ECITAR Y BORRAR DE UNA LIBRERIA DE ICONOS QUE TIENE REACT Y LO INSTALAMOS CON npm install react-icons --save */\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\nimport { TiInputCheckedOutline } from 'react-icons/ti';\r\n\r\nconst Tarea = (props) =>{\r\n    const [modoEdit, setModoEdit] = useState(false);\r\n    const [editText, setEditText] = useState(props.tarea);\r\n\r\n    const editarTarea = () => {\r\n        setModoEdit(true)\r\n    }\r\n\r\n    const manejarEdit =(event) => {\r\n        setEditText(event.target.value);\r\n    }\r\n\r\n    const submitEdit = (event) => {\r\n        event.preventDefault();\r\n        props.editar(props.id, editText)\r\n        setEditText(\"\");\r\n        setModoEdit(false)\r\n    }\r\n\r\n    const borrarTarea = () => {/*MENSAJE QUE APARECE A LA HORA DE ELIMINAR UNA TAREA */\r\n        swal({\r\n            title: \"¿Estas seguro?\",\r\n            text: \"Una vez eliminada, ¡no podrá recuperar esta tarea!\",\r\n            icon: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n        .then((willDelete) => {\r\n            if (willDelete) {\r\n              props.borrar(props.id)\r\n              swal(\"Su tarea a sido borrada correctamente!\", {\r\n                icon: \"success\",\r\n              });\r\n            } else {\r\n              swal(\"No se borro su tarea!\");\r\n            }\r\n        });\r\n    }\r\n\r\n    const tarealistaBorrar = () => {/*MENSAJE QUE APARECE A LA HORA DE ELIMINAR UNA TAREA */\r\n        swal({\r\n            title: \"¿Estas seguro?\",\r\n            text: \"Una vez hecha la tarea se eliminará, !no podrá recuperar esta tarea!\",\r\n            icon: \"info\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n        .then((willDelete) => {\r\n            if (willDelete) {\r\n              props.borrar(props.id)\r\n              swal(\"Su tarea ya esta hecha e eliminada!\", {\r\n                icon: \"success\",\r\n              });\r\n            } else {\r\n              swal(\"No hiciste la tarea!\", {\r\n                icon: \"error\",\r\n                });\r\n                \r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    \r\n\r\n    return(\r\n        <div>\r\n            {\r\n                !modoEdit ?\r\n                <div className=\"lista\" >\r\n                   <h6>{props.tarea}</h6>\r\n                   <div className='icons'>\r\n                        <RiCloseCircleLine\r\n                        onClick={borrarTarea}\r\n                        className='delete-icon'\r\n                        />\r\n                        <TiEdit\r\n                        onClick={editarTarea}\r\n                        className='edit-icon'\r\n                        />\r\n                        <TiInputCheckedOutline \r\n                        onClick={tarealistaBorrar}\r\n                        className='tareaHecha-icon'\r\n                        />\r\n                    </div>\r\n                   {/* <button onClick={editarTarea}>Editar</button>\r\n                   <button onClick={borrarTarea}>Borrar</button>  */}\r\n               </div>\r\n               :\r\n               <form className=\"formEdit\" onSubmit={submitEdit}>\r\n                   <input value={editText} onChange={manejarEdit} /><button>Guardar</button><br></br>\r\n               </form>\r\n               \r\n               \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Tarea;","import React, { useState, useEffect } from 'react';\r\nimport Formulario from './componentes/Formulario';\r\nimport Tarea from './componentes/Tarea';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const[listaTareas, setListaTareas] = useState([]);\r\n  const KEY = \"myapp.listaTareas\"\r\n  const nuevaTarea = (tarea) => { /*setListaTareas ESTE ES UN ARRAY DONDE CONTIENE LA LISTA DE TODAS LAS TAREAS */\r\n    setListaTareas([tarea, ...listaTareas])//los 3 pts hace como si fuese una copia\r\n  }\r\n\r\n/*PUEDES ELIMINAR LA TAREA */\r\n  const borrar = (id) =>{\r\n    const listaFiltrada = listaTareas.filter((e, index)=> index !== id);\r\n    setListaTareas(listaFiltrada);\r\n  }\r\n\r\n  /*SI LA TAREA ESTA LISTA PUEDES ELIMINARLA */\r\n  const tarealista = (id) =>{\r\n    const listaFiltrada = listaTareas.filter((e, index)=> index !== id);\r\n    setListaTareas(listaFiltrada);\r\n  }\r\n\r\n  const actTarea = (id, tarea) => {\r\n    const listaActualizada = listaTareas.map((e, index) => {\r\n      if(index === id){\r\n        e = tarea;\r\n      }\r\n\r\n      return e;\r\n    })\r\n\r\n    setListaTareas(listaActualizada)\r\n  }\r\n\r\n  useEffect(()=>{\r\n    const storeTareas = JSON.parse(localStorage.getItem(KEY));\r\n    if(storeTareas){\r\n      setListaTareas(storeTareas);\r\n    }\r\n  }\r\n  ,[])\r\n  useEffect(() => {\r\n    localStorage.setItem(KEY, JSON.stringify(listaTareas));\r\n  }\r\n  ,[listaTareas])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Formulario \r\n        nuevaTarea = {nuevaTarea}\r\n      />\r\n      \r\n      <div className=\"listas\">\r\n        {\r\n          listaTareas.map((e, index) => <Tarea\r\n            tarea={e}\r\n            borrar={borrar}\r\n            id={index}\r\n            editar={actTarea}\r\n            tarealista={borrar}\r\n            />)\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}